diff -burN gmp-6.2.1/configure gmp-6.2.1-PSP/configure
--- gmp-6.2.1/configure	2020-11-14 19:45:15.000000000 +0100
+++ gmp-6.2.1-PSP/configure	2021-11-01 07:17:13.450411582 +0100
@@ -11203,7 +11203,7 @@
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; } \
      && grep .note.GNU-stack conftest.s >/dev/null \
-     && { ac_try='${CC} $CFLAGS $CPPFLAGS -Wa,--noexecstack
+     && { ac_try='${CC} $ASMFLAGS -Wa,--noexecstack
                        -c -o conftest.o conftest.s >/dev/null'
   { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_try\""; } >&5
   (eval $ac_try) 2>&5
diff -burN gmp-6.2.1/gmp-h.in gmp-6.2.1-PSP/gmp-h.in
--- gmp-6.2.1/gmp-h.in	2020-11-14 19:45:09.000000000 +0100
+++ gmp-6.2.1-PSP/gmp-h.in	2021-11-01 07:17:32.921412087 +0100
@@ -361,14 +361,14 @@
     GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
     inline semantics, unless -fgnu89-inline is used.  */
 #ifdef __GNUC__
-#if (defined __GNUC_STDC_INLINE__) || (__GNUC__ == 4 && __GNUC_MINOR__ == 2) \
-  || (defined __GNUC_GNU_INLINE__ && defined __cplusplus)
+#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2)
 #define __GMP_EXTERN_INLINE extern __inline__ __attribute__ ((__gnu_inline__))
-#else
+#define __GMP_INLINE_PROTOTYPES  1
+#elif !(defined __APPLE__ && defined __MACH__ && __APPLE_CC__ >= 5465 && __STDC_VERSION__ >= 199901L)
 #define __GMP_EXTERN_INLINE      extern __inline__
-#endif
 #define __GMP_INLINE_PROTOTYPES  1
 #endif
+#endif
 
 /* DEC C (eg. version 5.9) supports "static __inline foo()", even in -std1
    strict ANSI mode.  Inlining is done even when not optimizing (ie. -O0
diff -burN gmp-6.2.1/mpn/generic/udiv_w_sdiv.c gmp-6.2.1-PSP/mpn/generic/udiv_w_sdiv.c
--- gmp-6.2.1/mpn/generic/udiv_w_sdiv.c	2020-11-14 19:45:09.000000000 +0100
+++ gmp-6.2.1-PSP/mpn/generic/udiv_w_sdiv.c	2021-11-01 07:17:21.168411782 +0100
@@ -1,3 +1,4 @@
+#if !defined(__zarch__)
 /* mpn_udiv_w_sdiv -- implement udiv_qrnnd on machines with only signed
    division.
 
@@ -139,3 +140,4 @@
   *rp = r;
   return q;
 }
+#endif
